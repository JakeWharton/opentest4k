plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.30'
    id 'org.jetbrains.dokka' version '0.9.18'
}

group 'com.willowtreeapps.opentest4k'
version '1.1.1'

repositories {
    mavenCentral()
    jcenter()
}

kotlin {
    jvm()
    js()

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
           dependencies {
               implementation kotlin('stdlib-jdk8')
               implementation "org.opentest4j:opentest4j:1.1.1"
           }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation kotlin('reflect')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

task test {
    dependsOn(jvmTest, jsTest)
}

ext {
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}

task dokkaCommon(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/common"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
}

task dokkaJs(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JS", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/js"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
        platforms = ["JS"]
    }
}

task dokkaJvm(type: org.jetbrains.dokka.gradle.DokkaTask) {
    impliedPlatforms = ["JVM", "Common"]
    kotlinTasks { [] }
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc/jvm"
    sourceRoot {
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["Common"]
    }
    sourceRoot {
        path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
        platforms = ["JVM"]
    }
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/common"
}

task dokkaJavadocJsJar(type: Jar, dependsOn: dokkaJs) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/js"
}

task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaJvm) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/jvm"
}

publishing {
    repositories {
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }

            credentials {
                username = project.findProperty('sonatype.username')
                password = project.findProperty('sonatype.password')
            }
        }
    }

    publications {
//        common(MavenPublication) {
//            from components.kotlin
//        }
        js {
            artifact dokkaJavadocJsJar
        }
        jvm {
            artifact dokkaJavadocJvmJar
        }
        metadata {
            artifact dokkaJavadocCommonJar
        }
        all {
            def siteUrl = 'https://github.com/willowtreeapps/opentest4k'
            def gitUrl = 'https://github.com/willowtreeapps/opentest4k.git'

            pom {
                name = project.name
                description = 'multiplatform implementation/bindings of opentest4j'
                url = siteUrl

                scm {
                    url = siteUrl
                    connection = gitUrl
                    developerConnection = gitUrl
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'evant'
                        name = 'Evan Tatarka'
                    }
                }
            }
        }
    }
}

signing {
    publishing.publications.all { sign it }
}

